{"version":3,"sources":["logo.svg","component/NavBar.jsx","component/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","state","react_default","a","createElement","class","href","className","Component","landingPage","Fragment","App","component_NavBar","role","LandingPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLC4CzBC,6MAzCbC,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,4CACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAeC,KAAK,KAA7B,KAGAJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,IACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,mDACZL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBACZL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,UAIFJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBACZL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,eAIFJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBACZL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,SAIFJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBACZL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,YAIFJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,iBACZL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,qBA/BOE,aC0CNC,6MAzCbR,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0CACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qEACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oEACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAhB,eACAL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAhB,qBACAL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cACdL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAhB,KAAuC,IACvCL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,UAAhB,YACWL,EAAAC,EAAAC,cAAA,yBACH,IACRF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAhB,KAAuC,KAEzCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,WACdL,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,6FAGEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uDACM,SAMlBF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8EAnCCC,aCeXG,MAXf,WACE,OACET,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAAA,QAAMS,KAAK,OAAOR,MAAM,cACtBH,EAAAC,EAAAC,cAACU,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac89ec95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav class=\"navbar fixed-top navbar-dark zeroOpacity\">\n        <a class=\"navbar-brand\" href=\"#\">\n          N\n        </a>\n        <div className=\"\">\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0 d-flex flex-row\">\n            <li className=\"nav-item px-2\">\n              <a class=\"nav-link\" href=\"#\">\n                About\n              </a>\n            </li>\n            <li className=\"nav-item px-2\">\n              <a class=\"nav-link\" href=\"#\">\n                Experiance\n              </a>\n            </li>\n            <li className=\"nav-item px-2\">\n              <a class=\"nav-link\" href=\"#\">\n                Work\n              </a>\n            </li>\n            <li className=\"nav-item px-2\">\n              <a class=\"nav-link\" href=\"#\">\n                Connect\n              </a>\n            </li>\n            <li className=\"nav-item px-2\">\n              <a class=\"nav-link\" href=\"#\">\n                Resume\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass landingPage extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row jumbotron zeroOpacity middleofpage\">\n          <div className=\"col-md-1 col-lg-1 ml-auto d-flex align-items-center mt-4 mt-md-0\" />\n          <div className=\"col-md-9 col-lg-9 ml-auto d-flex align-items-center mt-4 mt-md-0\">\n            <div className=\"contentwrapper\">\n              <span className=\"introduction\">Hi, This is</span>\n              <br />\n              <span className=\"name\">Nitheesh M Ashraf</span>\n              <br />\n              <span className=\"profession\">\n                <span className=\"brightcolor\">a</span>{\" \"}\n                <span className=\"career\">\n                  Software <span>Engineer</span>\n                </span>{\" \"}\n                <span className=\"brightcolor\">.</span>{\" \"}\n              </span>\n              <br />\n              <div>\n                <span className=\"aboutme\">\n                  <p>\n                    <span>\n                      I'm based in Dubai, UAE. I create web based applications\n                      and a whole lot more.\n                      <br />\n                      <span>Start scrolling to know more about me.</span>\n                    </span>{\" \"}\n                  </p>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-1 col-lg-1 ml-auto d-flex align-items-center mt-4 mt-md-0\" />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default landingPage;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NavBar from \"./component/NavBar\";\nimport LandingPage from \"./component/LandingPage\";\n\nfunction App() {\n  return (\n    <view>\n      <NavBar />\n      <main role=\"main\" class=\"container \">\n        <LandingPage />\n      </main>\n    </view>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}